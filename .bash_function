#! /usr/bin/bash
# All functions in this file are sourced by $HOME/.bashrc.
#
# Like >> but to the beginning. Uses a temp file.
function prepend
{
	cat - $1 > /tmp/prepend-out && mv /tmp/prepend-out $1
}

# Traverse up te directory tree.
# up [[0-9] | pattern]
# If no argument is given, move up one level.
# If a number is given, move up that many levels.
# If a pattern is given, non-greedily match any glob and move above the matched directory one level.
function up
{
    local dir=""
    if [[ $1 =~ ^[0-9]+$ ]]; then
        x=0
		# Note the default value of 1 if $i is null.
        while [ $x -lt ${1:-1} ]; do
            dir=${dir}../
            x=$(($x+1))
        done
    else
        dir=${PWD%/*$1*}
    fi
    cd "$dir";
}

__git_ps1 () {
    local exit_code=$?

    local g="$(git rev-parse --git-dir 2>/dev/null)"
    if [ -n "$g" ]; then
        local r
        local b
        if [ -d "$g/../.dotest" ]; then
            r="|AM/REBASE"
            b="$(git symbolic-ref HEAD 2>/dev/null)"
        elif [ -f "$g/.dotest-merge/interactive" ]; then
            r="|REBASE-i"
            b="$(cat $g/.dotest-merge/head-name)"
        elif [ -d "$g/.dotest-merge" ]; then
            r="|REBASE-m"
            b="$(cat $g/.dotest-merge/head-name)"
        elif [ -f "$g/MERGE_HEAD" ]; then
            r="|MERGING"
            b="$(git symbolic-ref HEAD 2>/dev/null)"
        else
            if [ -f $g/BISECT_LOG ]; then
                r="|BISECTING"
            fi
            if ! b="$(git symbolic-ref HEAD 2>/dev/null)"; then
                b="$(cut -c1-7 $g/HEAD)..."
            fi
        fi

        printf " (%s) " "${b##refs/heads/}$r"
    fi

    # This function is used in PS1, we want to preserve program exit code
    return $exit_code
}
